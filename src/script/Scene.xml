<glue>
	<head><![CDATA[// Copyright (C) 2014, Panagiotis Christopoulos Charitos.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// WARNING: The file is auto generated.

#include "anki/script/LuaBinder.h"
#include "anki/Scene.h"
#include <utility>

namespace anki {

//==============================================================================
template<typename T, typename... TArgs>
static T* newSceneNode(SceneGraph* scene, CString name, TArgs... args)
{
	T* ptr;
	Error err = scene->template newSceneNode<T>(
		name, ptr, args...);

	if(!err)
	{
		return ptr;
	}
	else
	{
		return nullptr;
	}
}]]></head>

	<classes>
		<class name="MoveComponent">
			<methods>
				<method name="setLocalOrigin">
					<args>
						<arg>const Vec4&amp;</arg>
					</args>
				</method>
				<method name="getLocalOrigin">
					<return>const Vec4&amp;</return>
				</method>
				<method name="setLocalRotation">
					<args>
						<arg>const Mat3x4&amp;</arg>
					</args>
				</method>
				<method name="getLocalRotation">
					<return>const Mat3x4&amp;</return>
				</method>
				<method name="setLocalScale">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getLocalScale">
					<return>F32</return>
				</method>
			</methods>
		</class>
		<class name="SceneNode">
			<methods>
				<method name="getName">
					<return>CString</return>
				</method>
				<method name="addChild">
					<args>
						<arg>SceneNode*</arg>
					</args>
					<return>Error</return>
				</method>
				<method name="getComponent&lt;MoveComponent&gt;" alias="getMoveComponent">
					<return>MoveComponent&amp;</return>
				</method>
			</methods>
		</class>
		<class name="ModelNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="InstanceNode">
			<methods>
				<method name="getSceneNodeBase">
					<overrideCall>SceneNode&amp; ret = *self;</overrideCall>
					<return>SceneNode&amp;</return>
				</method>
			</methods>
		</class>
		<class name="SceneGraph">
			<methods>
				<method name="newModelNode">
					<overrideCall><![CDATA[ModelNode* ret = newSceneNode<ModelNode>(self, arg0, arg1);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
						<arg>const CString&amp;</arg>
					</args>
					<return zeroAsError="1">ModelNode*</return>
				</method>
				<method name="newInstanceNode">
					<overrideCall><![CDATA[InstanceNode* ret = newSceneNode<InstanceNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>const CString&amp;</arg>
					</args>
					<return zeroAsError="1">InstanceNode*</return>
				</method>
			</methods>
		</class>
	</classes>

	<tail><![CDATA[} // end namespace anki]]></tail>
</glue>

