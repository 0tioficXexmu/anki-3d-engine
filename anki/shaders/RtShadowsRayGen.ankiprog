// Copyright (C) 2009-2020, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki library RtShadows
#pragma anki ray_type 0

#pragma anki start rgen

layout(set = 0, binding = 0) uniform sampler u_trilinearRepeatSampler; // Used by the hit shaders
layout(set = 0, binding = 1, rgba8) uniform image2D out_img;
layout(set = 0, binding = 2) uniform sampler u_linearAnyClampSampler;
layout(set = 0, binding = 3) uniform texture2D u_depthRt;
layout(set = 0, binding = 4) uniform accelerationStructureEXT u_tlas;

#define LIGHT_SET 0
#define LIGHT_COMMON_UNIS_BINDING 5
#define LIGHT_LIGHTS_BINDING 6
#define LIGHT_CLUSTERS_BINDING 9
#include <anki/shaders/ClusteredShadingCommon.glsl>

ANKI_BINDLESS_SET(1); // Used by the hit shaders

layout(location = 0) rayPayloadEXT F32 g_payload;

void main()
{
	// World position
	const Vec2 uv = (Vec2(gl_LaunchIDEXT.xy) + 0.5) / Vec2(gl_LaunchSizeEXT.xy);
	const Vec2 ndc = UV_TO_NDC(uv);
	const F32 depth = textureLod(u_depthRt, u_linearAnyClampSampler, uv, 0.0).r;
	const Vec4 worldPos4 = u_invViewProjMat * Vec4(ndc, depth, 1.0);
	const Vec3 worldPos = worldPos4.xyz / worldPos4.w;

	// Cluster
	const U32 clusterIdx = computeClusterIndex(u_clustererMagic, uv, worldPos, u_lightingUniforms.m_clusterCount.x,
											   u_lightingUniforms.m_clusterCount.y);
	U32 idxOffset = u_clusters[clusterIdx];

	U32 shadowCasterCountPerFragment = 0;
	const U32 maxShadowCastersPerFragment = 4;
	F32 shadowFactors[maxShadowCastersPerFragment] = F32[](0.0, 0.0, 0.0, 0.0);

	// Dir light
	if(u_dirLight.m_active != 0u && u_dirLight.m_cascadeCount > 0)
	{
		g_payload = 1.0;

		const Vec3 rayOrigin = worldPos;
		const Vec3 rayDir = -u_dirLight.m_dir;
		const U32 cullMask = 0xFF;
		const U32 sbtRecordOffset = 0;
		const U32 sbtRecordStride = 0;
		const U32 missIndex = 0;
		const F32 tMin = 0.1;
		const F32 tMax = 10000.0;
		const I32 payloadLocation = 0;
		traceRayEXT(u_tlas, gl_RayFlagsOpaqueEXT, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, rayOrigin,
					tMin, rayDir, tMax, payloadLocation);

		++shadowCasterCountPerFragment;
		shadowFactors[0] = g_payload;
	}

	// TODO rest of lights

	// Store
	imageStore(out_img, IVec2(gl_LaunchIDEXT.xy),
			   Vec4(shadowFactors[0], shadowFactors[1], shadowFactors[2], shadowFactors[3]));
}
#pragma anki end
