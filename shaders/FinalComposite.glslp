// Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator BLUE_NOISE 0 1
#pragma anki mutator SHARPEN_ENABLED 0 1
#pragma anki mutator BLOOM_ENABLED 0 1
#pragma anki mutator DBG_ENABLED 0 1

#pragma anki input const U32 LUT_SIZE
#pragma anki input const UVec2 FB_SIZE

#pragma anki start vert
#include <shaders/QuadVert.glsl>
#pragma anki end

#pragma anki start frag
#include <shaders/Common.glsl>
#include <shaders/Tonemapping.glsl>
#include <shaders/Functions.glsl>

layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_isRt;
layout(ANKI_TEX_BINDING(0, 1)) uniform sampler2D u_ppsBloomLfRt;
layout(ANKI_TEX_BINDING(0, 2)) uniform sampler3D u_lut;
layout(ANKI_TEX_BINDING(0, 3)) uniform sampler2DArray u_blueNoise;
#if DBG_ENABLED
layout(ANKI_TEX_BINDING(0, 5)) uniform sampler2D u_dbgRt;
#endif

layout(std140, ANKI_UBO_BINDING(0, 0)) uniform u0_
{
	Vec4 u_blueNoiseLayerPad3;
};

#define TONEMAPPING_BINDING 1
#include <shaders/TonemappingResources.glsl>

layout(location = 0) in Vec2 in_uv;
layout(location = 0) out Vec3 out_color;

Vec3 colorGrading(in Vec3 color)
{
	const Vec3 LUT_SCALE = Vec3((F32(LUT_SIZE) - 1.0) / F32(LUT_SIZE));
	const Vec3 LUT_OFFSET = Vec3(1.0 / (2.0 * F32(LUT_SIZE)));

	color = min(color, Vec3(1.0));
	Vec3 lutCoords = color * LUT_SCALE + LUT_OFFSET;
	return textureLod(u_lut, lutCoords, 0.0).rgb;
}

void main()
{
	Vec2 uv = in_uv.xy;

#if SHARPEN_ENABLED
	out_color = readSharpen(u_isRt, uv, 0.15, true);
#else
	out_color = textureLod(u_isRt, uv, 0.0).rgb;
#endif

	out_color = tonemap(out_color, UNIFORM(u_exposureThreshold0));

#if BLOOM_ENABLED
	Vec3 bloom = textureLod(u_ppsBloomLfRt, uv, 0.0).rgb;
	out_color += bloom;
#endif

	out_color = colorGrading(out_color);

#if BLUE_NOISE
	Vec3 blueNoise = textureLod(u_blueNoise, Vec3(FB_SIZE / Vec2(64.0) * uv, u_blueNoiseLayerPad3.x), 0.0).rgb;
	blueNoise = blueNoise * 2.0 - 1.0;
	blueNoise = sign(blueNoise) * (1.0 - sqrt(1.0 - abs(blueNoise)));

	out_color += blueNoise / 255.0;
#endif

#if 0
	{
		out_color = Vec3(u_averageLuminance / 1.0);
	}
#endif

#if DBG_ENABLED
	out_color += textureLod(u_dbgRt, uv, 0.0).rgb;
#endif
}

#pragma anki end
