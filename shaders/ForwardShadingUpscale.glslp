// Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki input const Vec2 SRC_SIZE
#pragma anki input const Vec2 FB_SIZE
#pragma anki input const U32 NOISE_TEX_SIZE

#pragma anki start vert
#include <shaders/QuadVert.glsl>
#pragma anki end

#pragma anki start frag
#include <shaders/Common.glsl>
#include <shaders/Functions.glsl>

#define EXPENSIVE_PASS 0
#define BLUE_NOISE 0

layout(location = 0) in Vec2 in_uv;

layout(location = 0) out Vec4 out_color;

layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_depthFullTex;
layout(ANKI_TEX_BINDING(0, 1)) uniform sampler2D u_depthHalfTex;
layout(ANKI_TEX_BINDING(0, 2)) uniform sampler2D u_fsRt;
#if BLUE_NOISE
layout(ANKI_TEX_BINDING(0, 3)) uniform sampler2DArray u_noiseTex;
#endif

layout(ANKI_UBO_BINDING(0, 0)) uniform u0_
{
	Vec4 u_linearizeCfFarPad1;
};

void main()
{
#if EXPENSIVE_PASS
	out_color =
		bilateralUpsample(u_depthFullTex, u_depthHalfTex, u_fsRt, 1.0 / Vec2(SRC_SIZE), in_uv, u_linearizeCfFarPad1.xy);
#else
	const F32 thresholdMeters = 5.0 / 100.0; // 5 centimeters
	F32 threshold = thresholdMeters / u_linearizeCfFarPad1.z;
	out_color = nearestDepthUpscale(in_uv, u_depthFullTex, u_depthHalfTex, u_fsRt, u_linearizeCfFarPad1.xy, threshold);
#endif

#if BLUE_NOISE
	Vec3 blueNoise = texture(u_noiseTex, Vec3(FB_SIZE / Vec2(NOISE_TEX_SIZE) * in_uv, 0.0), 0.0).rgb;
	blueNoise = blueNoise * 2.0 - 1.0;
	blueNoise = sign(blueNoise) * (1.0 - sqrt(1.0 - abs(blueNoise)));
	out_color.rgb += blueNoise / 32.0;
#endif
}
#pragma anki end
