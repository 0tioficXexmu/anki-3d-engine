// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator COLOR_TEXTURE 0 1
#pragma anki mutator DITHERED_DEPTH_TEST 0 1

#include <AnKi/Shaders/Common.hlsl>

struct Uniforms
{
	Vec4 m_color;
};

[[vk::push_constant]] ConstantBuffer<Uniforms> g_uniforms;

[[vk::binding(0)]] StructuredBuffer<Mat4> g_mvps;

struct VertIn
{
	[[vk::location(0)]] Vec3 m_position : POSITION;
#if COLOR_TEXTURE == 1
	[[vk::location(1)]] Vec2 m_uv : TEXCOORD;
#endif
	U32 m_svInstanceId : SV_INSTANCEID;
};

struct VertOut
{
	Vec4 m_svPosition : SV_POSITION;
	Vec2 m_uv : TEXCOORD;
};

#pragma anki start vert

VertOut main(VertIn input)
{
	VertOut output;

#if COLOR_TEXTURE == 1
	output.m_uv = input.m_uv;
#endif
	output.m_svPosition = mul(g_mvps[input.m_svInstanceId], Vec4(input.m_position, 1.0));

	return output;
}
#pragma anki end

#pragma anki start frag
#include <AnKi/Shaders/ImportanceSampling.hlsl>

#if COLOR_TEXTURE == 1
[[vk::binding(3)]] SamplerState g_trilinearRepeatSampler;
[[vk::binding(4)]] Texture2D g_tex;
#endif

// NOTE: Don't eliminate the binding because it confuses the descriptor set creation
#if DITHERED_DEPTH_TEST == 1
[[vk::binding(1)]] SamplerState g_nearestAnyClampSampler;
[[vk::binding(2)]] Texture2D g_depthRt;
#endif

Vec4 main(VertOut input) : SV_TARGET0
{
	ANKI_MAYBE_UNUSED(input);

	// Check if we should skip the frag
#if DITHERED_DEPTH_TEST == 1
	const UVec2 random = rand3DPCG16(UVec3(UVec2(input.m_svPosition.xy), 1)).xy;
	const Vec2 noise = Vec2(random) / 65536.0;
	const F32 factor = noise.x * noise.y;
	Vec2 texSize;
	g_depthRt.GetDimensions(texSize.x, texSize.y);
	const Vec2 uv = input.m_svPosition.xy / texSize;
	const F32 depthRef = g_depthRt.SampleLevel(g_nearestAnyClampSampler, uv, 0.0).r;
	const Bool depthTestFailed = input.m_svPosition.z >= depthRef;
	if(depthTestFailed && factor < 0.5)
	{
		discard;
	}
#endif

	// Write the color
#if COLOR_TEXTURE == 1
	return g_tex.Sample(g_trilinearRepeatSampler, input.m_uv) * g_uniforms.m_color;
#else
	return g_uniforms.m_color;
#endif
}
#pragma anki end
