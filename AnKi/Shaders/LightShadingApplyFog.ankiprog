// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki hlsl

#pragma anki start vert
#include <AnKi/Shaders/QuadVert.hlsl>
#pragma anki end

#pragma anki start frag

#include <AnKi/Shaders/Functions.hlsl>

ANKI_SPECIALIZATION_CONSTANT_U32(kZSplitCount, 0u);
ANKI_SPECIALIZATION_CONSTANT_U32(kFinalZSplit, 1u);

[[vk::binding(0)]] SamplerState g_nearestAnyClampSampler;
[[vk::binding(1)]] SamplerState g_linearAnyClampSampler;
[[vk::binding(2)]] Texture2D g_depthRt;
[[vk::binding(3)]] Texture3D<RVec4> g_fogVolume;

struct Uniforms
{
	Vec2 m_padding;
	F32 m_near;
	F32 m_far;
};

[[vk::push_constant]] ConstantBuffer<Uniforms> g_uniforms;

RVec4 main([[vk::location(0)]] Vec2 uv : TEXCOORD) : SV_TARGET0
{
	Vec3 uvw;

	// Compute W coordinate
	const F32 depth = g_depthRt.SampleLevel(g_nearestAnyClampSampler, uv, 0.0).r;
	const F32 linearDepth = linearizeDepth(depth, g_uniforms.m_near, g_uniforms.m_far);
	uvw.z = linearDepth * (F32(kZSplitCount) / F32(kFinalZSplit + 1u));

	// Compute UV coordinates
	uvw.xy = uv;

	// Read the volume
	const RVec4 fogVals = g_fogVolume.SampleLevel(g_linearAnyClampSampler, uvw, 0.0);
	const RVec3 inScattering = fogVals.rgb;
	const RF32 transmittance = fogVals.a;

	// Apply the fog
	return RVec4(inScattering, transmittance);
}

#pragma anki end
