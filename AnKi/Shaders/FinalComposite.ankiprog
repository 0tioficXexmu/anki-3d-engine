// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki hlsl

#pragma anki mutator FILM_GRAIN 0 1
#pragma anki mutator BLOOM_ENABLED 0 1
#pragma anki mutator DBG_ENABLED 0 1

#pragma anki start vert
#include <AnKi/Shaders/QuadVert.hlsl>
#pragma anki end

#pragma anki start frag
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/MotionBlur.hlsl>

ANKI_SPECIALIZATION_CONSTANT_U32(kLutSize, 0u);
ANKI_SPECIALIZATION_CONSTANT_UVEC2(kFramebufferSize, 1u);
ANKI_SPECIALIZATION_CONSTANT_U32(kMotionBlurSamples, 3u);

[[vk::binding(0)]] SamplerState u_nearestAnyClampSampler;
[[vk::binding(1)]] SamplerState u_linearAnyClampSampler;
[[vk::binding(2)]] SamplerState u_trilinearRepeatSampler;

[[vk::binding(3)]] Texture2D<RVec4> u_lightShadingRt;
[[vk::binding(4)]] Texture2D<RVec4> u_ppsBloomLfRt;
[[vk::binding(5)]] Texture3D<RVec4> u_lut;
[[vk::binding(6)]] Texture2D u_motionVectorsRt;
[[vk::binding(7)]] Texture2D u_depthRt;
#if DBG_ENABLED
[[vk::binding(8)]] Texture2D<RVec4> u_dbgOutlineRt;
#endif

struct PushConstants
{
	Vec2 m_padding0;
	F32 m_filmGrainStrength;
	U32 m_frameCount;
};

[[vk::push_constant]] ConstantBuffer<PushConstants> u_pc;

struct VertOut
{
	[[vk::location(0)]] Vec2 m_uv : TEXCOORD;
};

struct FragOut
{
	RVec3 m_color : SV_TARGET0;
};

RVec3 colorGrading(RVec3 color)
{
	constexpr RF32 kLutSizef = (RF32)kLutSize;
	constexpr RVec3 kLutScale = ((kLutSizef - 1.0) / kLutSizef).xxx;
	constexpr RVec3 kLutOffset = (1.0 / (2.0 * kLutSize)).xxx;

	color = min(color, RVec3(1.0, 1.0, 1.0));
	const RVec3 lutCoords = color * kLutScale + kLutOffset;
	return u_lut.SampleLevel(u_trilinearRepeatSampler, lutCoords, 0.0).rgb;
}

FragOut main(VertOut input)
{
	const Vec2 uv = input.m_uv;
	RVec3 outColor;

	if(kMotionBlurSamples > 0u)
	{
		outColor = motionBlur(u_motionVectorsRt, u_nearestAnyClampSampler, u_lightShadingRt, Vec2(kFramebufferSize),
							  u_linearAnyClampSampler, uv, kMotionBlurSamples);
	}
	else
	{
		outColor = u_lightShadingRt.SampleLevel(u_linearAnyClampSampler, uv, 0.0).rgb;
	}

#if BLOOM_ENABLED
	const RVec3 bloom = u_ppsBloomLfRt.SampleLevel(u_linearAnyClampSampler, uv, 0.0).rgb;
	outColor += bloom;
#endif

	outColor = colorGrading(outColor);

#if FILM_GRAIN
	const F32 dt = 1.0;
	outColor = filmGrain(outColor, uv, u_pc.m_filmGrainStrength, (F32)(u_pc.m_frameCount % 0xFFFFu) * dt);
#endif

#if DBG_ENABLED
	const RVec4 dbg = u_dbgOutlineRt.SampleLevel(u_linearAnyClampSampler, uv, 0.0);
	outColor = lerp(outColor, dbg.rgb, dbg.a);
#endif

	FragOut output;
	output.m_color = outColor;
	return output;
}

#pragma anki end
