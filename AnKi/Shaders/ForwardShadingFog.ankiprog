// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#include <AnKi/Shaders/ForwardShadingCommon.glsl>

struct PerDraw
{
	Mat3x4 m_ankiTransform;
	ANKI_RP Vec3 m_fogColor;
	ANKI_RP F32 m_fogAlphaScale;
	ANKI_RP F32 m_fogDistanceOfMaxThikness;
};

#pragma anki reflect b_ankiPerDraw
layout(set = 1, binding = 0, row_major, scalar) uniform b_ankiPerDraw
{
	PerDraw u_ankiPerDraw;
};

#pragma anki reflect b_ankiGlobalUniforms
layout(set = 1, binding = 1, row_major, scalar) uniform b_ankiGlobalUniforms
{
	MaterialGlobalUniforms u_ankiGlobals;
};

#pragma anki start vert

layout(location = 0) out F32 out_zVSpace;

void main()
{
	const Vec3 worldPos = u_ankiPerDraw.m_ankiTransform * Vec4(in_position, 1.0);

	gl_Position = u_ankiGlobals.m_viewProjectionMatrix * Vec4(worldPos, 1.0);

	const Vec3 viewPos = u_ankiGlobals.m_viewMatrix * Vec4(worldPos, 1.0);
	out_zVSpace = viewPos.z;
}

#pragma anki end

#pragma anki start frag

layout(location = 0) in F32 in_zVSpace;

void main()
{
	fog(u_ankiPerDraw.m_fogColor, u_ankiPerDraw.m_fogAlphaScale, u_ankiPerDraw.m_fogDistanceOfMaxThikness, in_zVSpace);
}
#pragma anki end
