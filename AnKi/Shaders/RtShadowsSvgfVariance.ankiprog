// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki start comp

#include <AnKi/Shaders/RtShadows.hlsl>
#include <AnKi/Shaders/BilateralFilter.hlsl>
#include <AnKi/Shaders/Functions.hlsl>

ANKI_SPECIALIZATION_CONSTANT_UVEC2(kFramebufferSize, 0u);

[[vk::binding(0)]] SamplerState g_nearestAnyClampSampler;
[[vk::binding(1)]] SamplerState g_linearAnyClampSampler;
[[vk::binding(2)]] Texture2D<UVec4> g_shadowsTex;
[[vk::binding(3)]] Texture2D g_momentsTex;
[[vk::binding(4)]] Texture2D g_historyLengthTex;
[[vk::binding(5)]] Texture2D g_depthTex;

[[vk::binding(6)]] RWTexture2D<UVec4> g_shadowsImage;
[[vk::binding(7)]] RWTexture2D<Vec4> g_varianceImage;

[[vk::push_constant]] ConstantBuffer<Mat4> g_invProjMat;

constexpr I32 kConvolutionRadius = 1;

Vec3 toViewspace(Vec2 uv, F32 depth)
{
	const Vec4 pos4 = mul(g_invProjMat, Vec4(uvToNdc(uv), depth, 1.0));
	const Vec3 pos = pos4.xyz / pos4.w;
	return pos;
}

[numthreads(8, 8, 1)] void main(UVec3 svDispatchThreadId : SV_DISPATCHTHREADID)
{
	if(any(svDispatchThreadId >= kFramebufferSize))
	{
		return;
	}

	const Vec2 uv = (Vec2(svDispatchThreadId.xy) + 0.5) / Vec2(kFramebufferSize);

	const F32 depth = g_depthTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).r;
	if(depth == 1.0)
	{
		// Sky
		g_shadowsImage[svDispatchThreadId.xy] = 0;
		g_varianceImage[svDispatchThreadId.xy] = 0.0f;
		return;
	}

	const F32 historyLength = g_historyLengthTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).r;

	UVec4 outPackedShadowLayers;
	F32 outVariance;

	if(historyLength < 4.0 / kRtShadowsMaxHistoryLength)
	{
		// It's been stable less than 4 frames, need to do some work

		const Vec2 texelSize = 1.0 / Vec2(kFramebufferSize);

		// Set the reference sample
		const F32 depthCenter = depth;
		const Vec3 positionCenter = toViewspace(uv, depthCenter);

		// Init the sums
		Vec2 sumMoments = 0.0f;
		F32 sumWeight = 0.0;
		RF32 sumShadowLayers[kMaxRtShadowLayers];
		zeroRtShadowLayers(sumShadowLayers);

		// Convolve
		for(I32 offsetx = -kConvolutionRadius; offsetx <= kConvolutionRadius; offsetx++)
		{
			for(I32 offsety = -kConvolutionRadius; offsety <= kConvolutionRadius; offsety++)
			{
				const Vec2 sampleUv = uv + Vec2(offsetx, offsety) * texelSize;

				// Set the current sample
				const F32 depthTap = g_depthTex.SampleLevel(g_linearAnyClampSampler, sampleUv, 0.0).r;
				const Vec3 positionTap = toViewspace(sampleUv, depthTap);

				// Do bilateral
				const F32 w = calculateBilateralWeightViewspacePosition(positionCenter, positionTap, 0.5);

				// Sum
				const Vec2 moments = g_momentsTex.SampleLevel(g_linearAnyClampSampler, sampleUv, 0.0).xy;
				sumMoments += moments * w;

				RF32 shadowLayers[kMaxRtShadowLayers];
				unpackRtShadows(g_shadowsTex.SampleLevel(g_nearestAnyClampSampler, sampleUv, 0.0), shadowLayers);
				[unroll] for(U32 i = 0u; i < kMaxRtShadowLayers; ++i)
				{
					sumShadowLayers[i] += shadowLayers[i] * w;
				}

				sumWeight += w;
			}
		}

		sumWeight += kEpsilonF32;

		[unroll] for(U32 i = 0u; i < kMaxRtShadowLayers; ++i)
		{
			sumShadowLayers[i] /= sumWeight;
		}
		sumMoments /= sumWeight;

		outPackedShadowLayers = packRtShadows(sumShadowLayers);

		outVariance = max(0.0, sumMoments.y - sumMoments.x * sumMoments.x);

		// Give the variance a boost for the first frames
		outVariance *= 4.0 / (historyLength * kRtShadowsMaxHistoryLength);
	}
	else
	{
		// Stable for more that 4 frames, passthrough

		outPackedShadowLayers = g_shadowsTex.SampleLevel(g_nearestAnyClampSampler, uv, 0.0);

		const Vec2 moments = g_momentsTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).xy;
		outVariance = max(0.0, moments.y - moments.x * moments.x);
	}

	// Store
	g_shadowsImage[svDispatchThreadId.xy] = outPackedShadowLayers;
	g_varianceImage[svDispatchThreadId.xy] = Vec4(outVariance, 0.0, 0.0, 0.0);
}
#pragma anki end
