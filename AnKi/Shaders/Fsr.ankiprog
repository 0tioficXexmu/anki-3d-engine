// Copyright (C) 2009-2021, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki start comp

#include <AnKi/Shaders/Functions.glsl>

layout(set = 0, binding = 0) uniform sampler u_linearAnyClampSampler;
layout(set = 0, binding = 1) uniform texture2D u_tex;
layout(set = 0, binding = 2) writeonly uniform image2D u_outImg;

layout(push_constant, std430) uniform b_pc
{
	UVec4 u_fsrConsts0;
	UVec4 u_fsrConsts1;
	UVec4 u_fsrConsts2;
	UVec4 u_fsrConsts3;
	UVec2 u_viewportSize;
	UVec2 u_padding;
};

// FSR begin
#define A_GPU 1
#define A_GLSL 1
#define A_HALF 1
#include <ThirdParty/Fsr/ffx_a.h>
#define FSR_EASU_H 1

AH4 FsrEasuRH(AF2 p)
{
	return AH4(textureGather(sampler2D(u_tex, u_linearAnyClampSampler), p, 0));
}

AH4 FsrEasuGH(AF2 p)
{
	return AH4(textureGather(sampler2D(u_tex, u_linearAnyClampSampler), p, 1));
}

AH4 FsrEasuBH(AF2 p)
{
	return AH4(textureGather(sampler2D(u_tex, u_linearAnyClampSampler), p, 2));
}

#include <ThirdParty/Fsr/ffx_fsr1.h>
// FSR end

layout(local_size_x = 8, local_size_y = 8) in;

void main()
{
	if(skipOutOfBoundsInvocations(UVec2(8u), u_viewportSize))
	{
		return;
	}

	HVec3 color;
	FsrEasuH(color, gl_GlobalInvocationID.xy, u_fsrConsts0, u_fsrConsts1, u_fsrConsts2, u_fsrConsts3);

	imageStore(u_outImg, IVec2(gl_GlobalInvocationID.xy), Vec4(color, 0.0));
}

#pragma anki end
