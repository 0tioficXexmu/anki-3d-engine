// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator ANIMATED_TEXTURE 0 1
#pragma anki mutator LIGHT 0 1

#include <AnKi/Shaders/ForwardShadingCommon.glsl>

struct PerDraw
{
	Mat3x4 m_ankiTransform;
#if ANIMATED_TEXTURE == 1
	F32 m_animationPeriod;
#endif
	ANKI_RP Vec4 m_colorScale;
	ANKI_RP Vec4 m_colorBias;
};

#pragma anki reflect b_ankiPerDraw
layout(set = 1, binding = 0, row_major, scalar) uniform b_ankiPerDraw
{
	PerDraw u_ankiPerDraw;
};

#pragma anki reflect b_ankiGlobalUniforms
layout(set = 1, binding = 1, row_major, scalar) uniform b_ankiGlobalUniforms
{
	MaterialGlobalUniforms u_ankiGlobals;
};

#pragma anki reflect u_ankiGlobalSampler
layout(set = 1, binding = 2) uniform sampler u_ankiGlobalSampler;
#if ANIMATED_TEXTURE == 0
#	pragma anki reflect u_diffuseMap
layout(set = 1, binding = 3) uniform ANKI_RP texture2D u_diffuseMap;
#endif
#if ANIMATED_TEXTURE == 1
#	pragma anki reflect u_diffuseMapArr
layout(set = 1, binding = 3) uniform ANKI_RP texture2DArray u_diffuseMapArr;
#endif

#pragma anki start vert

layout(location = VERTEX_ATTRIBUTE_ID_SCALE) in F32 in_scale;
layout(location = VERTEX_ATTRIBUTE_ID_ALPHA) in F32 in_alpha;

layout(location = 0) flat out ANKI_RP F32 out_alpha;
layout(location = 1) out Vec2 out_uv;
layout(location = 2) out Vec3 out_worldPos;

void main()
{
	out_uv = Vec2(gl_VertexID & 1, gl_VertexID >> 1);

	out_worldPos = u_ankiGlobals.m_cameraRotationMatrix * Vec3((out_uv - 0.5) * in_scale, 0.0) + in_position;
	gl_Position =
		u_ankiGlobals.m_viewProjectionMatrix * Vec4(u_ankiPerDraw.m_ankiTransform * Vec4(out_worldPos, 1.0), 1.0);

	out_alpha = in_alpha;
}
#pragma anki end

#pragma anki start frag

layout(location = 0) flat in ANKI_RP F32 in_alpha;
layout(location = 1) in Vec2 in_uv;
layout(location = 2) in Vec3 in_worldPos;

void main()
{
#if ANIMATED_TEXTURE == 1
	ANKI_RP Vec4 texCol = readAnimatedTextureRgba(u_diffuseMapArr, u_ankiGlobalSampler, u_ankiPerDraw.m_animationPeriod,
												  in_uv, u_clusteredShading.m_time);
#else
	ANKI_RP Vec4 texCol = texture(u_diffuseMap, u_ankiGlobalSampler, in_uv);
#endif

#if LIGHT
	texCol.rgb = computeLightColorLow(texCol.rgb, in_worldPos);
#endif

	ANKI_RP Vec4 colScale = u_ankiPerDraw.m_colorScale;
	colScale.a *= in_alpha;
	particleAlpha(texCol, colScale, u_ankiPerDraw.m_colorBias);
}
#pragma anki end
