// Copyright (C) 2009-2023, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki start comp

#include <AnKi/Shaders/RtShadows.hlsl>
#include <AnKi/Shaders/Functions.hlsl>
#include <AnKi/Shaders/BilateralFilter.hlsl>

ANKI_SPECIALIZATION_CONSTANT_UVEC2(kOutImageSize, 0u);

[[vk::binding(0)]] SamplerState g_nearestAnyClampSampler;
[[vk::binding(1)]] SamplerState g_linearAnyClampSampler;
[[vk::binding(2)]] Texture2D<UVec4> g_quarterShadowsTex;
[[vk::binding(3)]] RWTexture2D<UVec4> g_fullShadowsImage;
[[vk::binding(4)]] Texture2D g_quarterDepthTex;
[[vk::binding(5)]] Texture2D g_fullDepthTex;

[numthreads(8, 8, 1)] void main(UVec3 svDispatchThreadId : SV_DISPATCHTHREADID)
{
	if(any(svDispatchThreadId.xy >= kOutImageSize))
	{
		return;
	}

	const Vec2 uv = (Vec2(svDispatchThreadId.xy) + 0.5) / Vec2(kOutImageSize);

	// Reference
	const F32 depthCenter = g_fullDepthTex.SampleLevel(g_linearAnyClampSampler, uv, 0.0).x;

	RF32 sumShadowLayers[kMaxRtShadowLayers];
	zeroRtShadowLayers(sumShadowLayers);

	// Do a bilateral upscale
	const Vec2 texelSize = 1.0 / Vec2(kOutImageSize / 2u);
	const I32 radius = 1;
	F32 sumWeight = kEpsilonF32;
	for(I32 x = -radius; x <= radius; ++x)
	{
		for(I32 y = -radius; y <= radius; ++y)
		{
			const Vec2 sampleUv = uv + Vec2(x, y) * texelSize;
			const F32 depthTap = g_quarterDepthTex.SampleLevel(g_linearAnyClampSampler, sampleUv, 0.0).x;

			const F32 w = calculateBilateralWeightDepth(depthCenter, depthTap, 1.0);

			RF32 shadowLayers[kMaxRtShadowLayers];
			unpackRtShadows(g_quarterShadowsTex.SampleLevel(g_nearestAnyClampSampler, sampleUv, 0.0), shadowLayers);

			for(U32 i = 0u; i < kMaxRtShadowLayers; ++i)
			{
				sumShadowLayers[i] += shadowLayers[i] * w;
			}

			sumWeight += w;
		}
	}

	for(U32 i = 0u; i < kMaxRtShadowLayers; ++i)
	{
		sumShadowLayers[i] /= sumWeight;
	}

	g_fullShadowsImage[svDispatchThreadId.xy] = packRtShadows(sumShadowLayers);
}

#pragma anki end
