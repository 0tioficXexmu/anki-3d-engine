<!-- 
Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
All rights reserved.
Code licensed under the BSD License.
http://www.anki3d.org/LICENSE
-->
<shaderProgram>
	<mutators>
		<mutator name="HORIZONTAL" values="0 1"/>
		<mutator name="KERNEL_SIZE" values="3 5 7 9 11 13 15"/>
		<mutator name="COLOR_COMPONENTS" values="4 3 1"/>
	</mutators>

	<shaders>
		<shader type="vert">
			<source><![CDATA[
#include "shaders/QuadVert.glsl"
			]]></source>
		</shader>

		<shader type="frag">
			<inputs>
				<input name="TEXTURE_SIZE" type="uvec2" const="1"/>
			</inputs>

			<source><![CDATA[
#include "shaders/GaussianBlurCommon.glsl"

layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_tex; ///< Input FAI

layout(location = 0) in vec2 in_uv;

// Determine color type
#if COLOR_COMPONENTS == 4
#	define COL_TYPE vec4
#	define TEX_FETCH rgba
#elif COLOR_COMPONENTS == 3
#	define COL_TYPE vec3
#	define TEX_FETCH rgb
#elif COLOR_COMPONENTS == 1
#	define COL_TYPE float
#	define TEX_FETCH r
#else
#	error See file
#endif

// Output
layout(location = 0) out COL_TYPE out_color;

void main()
{
#if HORIZONTAL
	const vec2 TEXEL_SIZE = vec2(1.0 / float(TEXTURE_SIZE.x), 0.0);
#else
	const vec2 TEXEL_SIZE = vec2(0.0, 1.0 / float(TEXTURE_SIZE.y));
#endif
	vec2 uv = in_uv;

	out_color = texture(u_tex, uv).TEX_FETCH * WEIGHTS[0u];
	vec2 texCoordOffset = 1.5 * TEXEL_SIZE;

	for(uint i = 0u; i < STEP_COUNT; ++i)
	{
		COL_TYPE col =
			texture(u_tex, uv + texCoordOffset).TEX_FETCH + texture(u_tex, uv - texCoordOffset).TEX_FETCH;
		out_color += WEIGHTS[i + 1u] * col;

		texCoordOffset += 2.0 * TEXEL_SIZE;
	}
}
			]]></source>
		</shader>
	</shaders>
</shaderProgram>

