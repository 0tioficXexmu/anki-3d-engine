<!-- 
Copyright (C) 2009-2018, Panagiotis Christopoulos Charitos and contributors.
All rights reserved.
Code licensed under the BSD License.
http://www.anki3d.org/LICENSE
-->
<shaderProgram>
	<mutators>
		<mutator name="VARIANT" values="0 1"/>
	</mutators>

	<shaders>
		<shader type="comp">
			<inputs>
				<input name="FB_SIZE" type="uvec2" const="1"/>
				<input name="WORKGROUP_SIZE" type="uvec2" const="1"/>
				<input name="MAX_STEPS" type="uint" const="1"/>
				<input name="LIGHT_BUFFER_MIP_COUNT" type="uint" const="1"/>
			</inputs>

			<source><![CDATA[
#include "shaders/Functions.glsl"
#include "shaders/Pack.glsl"

layout(local_size_x = WORKGROUP_SIZE.x, local_size_y = WORKGROUP_SIZE.y, local_size_z = 1) in;

layout(ANKI_TEX_BINDING(0, 0)) uniform sampler2D u_gbufferRt1;
layout(ANKI_TEX_BINDING(0, 1)) uniform sampler2D u_gbufferRt2;
layout(ANKI_TEX_BINDING(0, 2)) uniform sampler2D u_depthRt;
layout(ANKI_TEX_BINDING(0, 3)) uniform sampler2D u_lightBufferRt;

layout(ANKI_IMAGE_BINDING(0, 0)) writeonly uniform image2D u_out;

layout(ANKI_UBO_BINDING(0, 0), std140, row_major) uniform u0_
{
	mat4 u_projMat;
	mat4 u_invViewProjMat;
	mat4 u_invProjMat;
	mat4 u_viewMat;
	vec4 u_camPosNear;
	vec4 u_unprojParams;
};

#define u_camPos u_camPosNear.xyz
#define u_near u_camPosNear.w
#define u_normalMat mat3(u_viewMat)

float unprojZ(float depth)
{
	return u_unprojParams.z / (u_unprojParams.w + depth);
}

// Note: All calculations in view space
vec4 doSslr(vec3 r, vec3 n, vec3 viewPos, vec2 uv, float depth)
{
	vec3 p0 = viewPos;

	// Check for view facing reflections [sakibsaikia]
	vec3 viewDir = normalize(viewPos);
	float cameraFacingReflectionAttenuation = 1.0 - smoothstep(0.25, 0.5, dot(-viewDir, r));
	if(cameraFacingReflectionAttenuation <= 0.0)
	{
		return vec4(0.0);
	}

	// Compute an end point p1. This point is supposed to fall in front of the near plane. u_near is a bit bigger than
	// the actual near.
	vec3 p1 = p0 + r * (-p0.z - u_near);

	// Project the starting and end points
	vec3 start = vec3(uv, depth);
	vec4 end4 = u_projMat * vec4(p1, 1.0);
	vec3 end = end4.xyz / end4.w;
	end.xy = NDC_TO_UV(end.xy);

	// Compute the step size
	vec3 dir = end - start;
	vec2 texelDims = abs(dir.xy) * (vec2(FB_SIZE) / 4.0); // TODO maybe it should be FB_SIZE/2
	float stepSize = length(dir.xy) / max(texelDims.x, texelDims.y);
	dir = normalize(dir);

	// Iterate
	for(float i = 2.0; i < float(MAX_STEPS); i += 1.0)
	{
		vec3 screenPoint = start + dir * (i * stepSize);

		// Check if it's out of the view
		if(screenPoint.x <= 0.0 || screenPoint.y <= 0.0 || screenPoint.x >= 1.0 || screenPoint.y >= 1.0)
		{
			break;
		}

		// Get the viewspace Z from the depth buffer
		float depth = textureLod(u_depthRt, screenPoint.xy, 0.0).r;
		float newViewPosZ = unprojZ(depth);

		// Calc the viewspace Z of the ray vector
		float intersectionZ = unprojZ(screenPoint.z);

		// Compare
		float zDiff = newViewPosZ - intersectionZ;
		if(zDiff > 0.5)
		{
			/*if(zDiff > 1.0)
			{
				break;
			}*/

			// Compute contribution
			vec2 ndc = abs(UV_TO_NDC(screenPoint.xy));
			float contribution = max(ndc.x, ndc.y);
			contribution = 1.0 - contribution * contribution;
			contribution *= cameraFacingReflectionAttenuation;

			float roughness;
			vec3 specular;
			readRoughnessSpecularFromGBuffer(u_gbufferRt1, screenPoint.xy, roughness, specular);

			float lod = float(LIGHT_BUFFER_MIP_COUNT - 1u) * roughness;
			vec3 color = textureLod(u_lightBufferRt, screenPoint.xy, lod).rgb;
			return vec4(color, contribution);
		}
	}

	return vec4(0.0);
}

void main()
{
	uvec2 realInvocationId = gl_GlobalInvocationID.xy;
	realInvocationId.x *= 2u;
#if VARIANT == 0
	if((realInvocationId.y & 1u) == 0u)
#else
	if((realInvocationId.y & 1u) == 1u)
#endif
	{
		realInvocationId.x += 1u;
	}

	if(realInvocationId.x >= FB_SIZE.x || realInvocationId.y >= FB_SIZE.y)
	{
		// Skip threads outside the writable image
		return;
	}

	vec2 uv = vec2(realInvocationId) / vec2(FB_SIZE);

	// Get normal
	vec3 worldNormal;
	readNormalFromGBuffer(u_gbufferRt2, uv, worldNormal);

	// Get view pos
	float depth = textureLod(u_depthRt, uv, 0.0).r;
	vec4 viewPos4 = u_invProjMat * vec4(UV_TO_NDC(uv), depth, 1.0);
	vec3 viewPos = viewPos4.xyz / viewPos4.w;

	// Do SSLR
	vec3 viewDir = normalize(viewPos);
	vec3 viewNormal = u_normalMat * worldNormal;
	vec3 reflVec = reflect(viewDir, viewNormal);

	vec4 sslr = doSslr(reflVec, viewNormal, viewPos, uv, depth);
	float sslrFactor = sslr.w;
	vec3 sslrCol = sslr.xyz;

	// Write it
	imageStore(u_out, ivec2(realInvocationId), vec4(sslrCol * sslrFactor, 0.0));
}
			]]></source>
		</shader>
	</shaders>
</shaderProgram>
